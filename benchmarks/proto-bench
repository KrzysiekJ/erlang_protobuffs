#! /usr/bin/env escript
%% This line tells emacs to use -*- erlang -*- mode -*- coding: iso-8859-1 -*-
%%! -pa ../ebin/ -pa ./ -sname protoexerciser

%%% Copyright (C) 2011  Tomas Abrahamsson
%%%
%%% Author: Tomas Abrahamsson <tab@lysator.liu.se>
%%%
%%% This library is free software; you can redistribute it and/or
%%% modify it under the terms of the GNU Lesser General Public
%%% License as published by the Free Software Foundation; either
%%% version 2.1 of the License, or (at your option) any later version.
%%%
%%% This library is distributed in the hope that it will be useful,
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%%% Lesser General Public License for more details.
%%%
%%% You should have received a copy of the GNU Lesser General Public
%%% License along with this library; if not, write to the Free Software
%%% Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
%%% MA  02110-1301  USA

-mode(compile).
%-compile(export_all).
-export([main/1]).

main(Args) ->
    run_tests(Args).

run_tests([MsgModuleStr, MsgEncodeStr, MsgDecodeStr, MsgFile]) ->
    MsgModule = list_to_atom(MsgModuleStr),
    MsgEncoder = list_to_atom(MsgEncodeStr),
    MsgDecoder = list_to_atom(MsgDecodeStr),
    {ok, MsgBin} = file:read_file(MsgFile),
    DataSize = iolist_size(MsgBin),
    DecodeFun = fun() -> MsgModule:MsgDecoder(MsgBin) end,
    Msg = DecodeFun(),
    EncodeFun = fun() -> MsgModule:MsgEncoder(Msg) end,
    io:format("Benchmarking msg_pb with file ~s~n", [MsgFile]),
    run_test("Serialize to binary", DataSize, EncodeFun),
    run_test("Deserialize from binary", DataSize, DecodeFun),
    io:format("~n"); %,
run_tests([]) ->
    ok.

run_test(Description, DataSize, Action) ->
    MinSampleTime = 2, %% seconds
    TargetTime = 30,   %% seconds
    {Elapsed, NumIterations} = iterate_until_elapsed(MinSampleTime, Action),
    TargetNumIterations = round((TargetTime / Elapsed) * NumIterations),
    Elapsed2 = time_action(TargetNumIterations, Action),
    io:format("~s: ~w iterations in ~.3fs; ~.2fMB/s~n",
              [Description, TargetNumIterations, Elapsed2,
               (TargetNumIterations * DataSize) / (Elapsed2 * 1024 * 1024)]),
    ok.

iterate_until_elapsed(MaxDuration, Action) ->
    iterate_until_elapsed_2(1, MaxDuration, Action).

iterate_until_elapsed_2(NumIterations, MaxDuration, Action) ->
    case time_action(NumIterations, Action) of
        Elapsed when Elapsed < MaxDuration ->
            iterate_until_elapsed_2(NumIterations * 2, MaxDuration, Action);
        Elapsed when Elapsed >= MaxDuration ->
            {Elapsed, NumIterations}
    end.

time_action(NumIterations, Action) ->
    garbage_collect(),
    T0 = os:timestamp(),
    iterate_action(NumIterations, Action),
    T1 = os:timestamp(),
    timer:now_diff(T1, T0) / 1000000.

iterate_action(N, Action) when N > 0 ->
    Action(),
    iterate_action(N-1, Action);
iterate_action(0, _Action) ->
    ok.
